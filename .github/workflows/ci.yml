name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:

env:
  CI: 1
  ARTIFACT_DIR: ./artifacts
  FORCE_COLOR: 1

jobs:
  build:
    name: Install dependencies and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/detect-env
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Create artifacts directory
        run: mkdir -p ${{ env.ARTIFACT_DIR }}
      - name: Restore node modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ env.NODE_VERSION }}-${{ env.YARN_VERSION }}-${{ hashFiles('yarn.lock') }}
      - name: Install yvm
        run: node ./scripts/install.js
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Build
        run: make build-production
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
  tests:
    name: Unit tests and checks
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/detect-env
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
      - name: Restore node modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ env.NODE_VERSION }}-${{ env.YARN_VERSION }}-${{ hashFiles('yarn.lock') }}
      - name: Install yvm
        run: make install-local
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Tests
        run: make test-coverage
      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        env:
          verbose: true
      - name: Linting
        run: make lint
      - name: Lint circular check
        run: make lint-defend-circular
      - name: Release size check
        env:
          BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: make bundlewatch
  sanities:
    name: Sanity tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        terminal: [bash, zsh, fish]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/detect-env
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
      - name: Restore node modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ env.NODE_VERSION }}-${{ env.YARN_VERSION }}-${{ hashFiles('yarn.lock') }}
      - name: Install yvm
        run: make install-local
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Setup env (zsh)
        if: matrix.terminal == 'zsh'
        run: |
          sudo apt-get update
          sudo apt-get install zsh
          touch ~/.zshrc
      - name: Setup env (fish)
        if: matrix.terminal == 'fish'
        run: |
          sudo apt-get update
          sudo apt-get install fish
          mkdir -p ~/.config/fish
          touch ~/.config/fish/config.fish
          make install-local
      - name: Sanity test ${{ matrix.terminal }}
        run: make sanities-${{ matrix.terminal }}
  release:
    name: Release yvm
    runs-on: ubuntu-latest
    needs: [build, tests, sanities]
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
      - uses: cycjimmy/semantic-release-action@v2
        with:
          branch: master
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
  website:
    name: Deploy website
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: ./.github/actions/detect-env
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore node modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ./website/node_modules
          key: ${{ env.NODE_VERSION }}-${{ env.YARN_VERSION }}-${{ hashFiles('./website/yarn.lock') }}
      - name: Install yvm
        run: node ./scripts/install.js
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
        working-directory: ./website
      - name: Build
        run: yarn build
        working-directory: ./website
      - name: Deploy
        if: github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH: gh-pages
          FOLDER: ./website/build/yvm
          CLEAN: true
          COMMIT_MESSAGE: 'docs: deploying website [skip ci]'
