name: Continuous Integration

on: pull_request_target

env:
  CI: 1
  ARTIFACT_DIR: ./artifacts
  FORCE_COLOR: 1

jobs:
  build:
    name: Install node modules and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/detect-node
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Create artifacts directory
        run: mkdir -p ${{ env.ARTIFACT_DIR }}
      - name: Restore node modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ env.NODE_VERSION }}-${{ env.YARN_VERSION }}-${{ hashFiles('yarn.lock') }}
      - name: Installl yvm
        run: node ./scripts/install.js
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Build
        run: make build-production
      - uses: cycjimmy/semantic-release-action@v2
        with:
          dry_run: true
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
  tests:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/detect-node
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Tests
        run: make test-coverage
      - name: Linting
        run: make lint
      - name: Circular Linting
        run: make lint-defend-circular
      - name: Release Size Check
        run: make bundlewatch
  sanity-tests:
      name: bash, zsh and fish sanity tests
      runs-on: ubuntu-latest
      needs: [build]
      strategy:
        matrix:
          terminal: [bash, zsh, fish]
      steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: ./.github/actions/detect-node
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ${{ env.ARTIFACT_DIR }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: make node_modules
      - name: Installl yvm
        run: node ./scripts/install.js
      - name: Setup Env (zsh)
        if: matrix.terminal == 'zsh'
        run: |
          sudo apt-get update
          sudo apt-get install zsh
          touch ~/.zshrc
      - name: Setup Env (fish)
        if: matrix.terminal == 'fish'
        run: |
          sudo apt-get update
          sudo apt-get install fish
          mkdir -p ~/.config/fish
          touch ~/.config/fish/config.fish
          node ./scripts/install.js
      - name: Sanity test ${{ matrix.terminal }}
        run: make sanities-${{ matrix.terminal }}
